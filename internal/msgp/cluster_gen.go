package msgp

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ChangeClusterMembersEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Members")
				return
			}
			if z.Members == nil {
				z.Members = make(map[string]string, zb0002)
			} else if len(z.Members) > 0 {
				for key := range z.Members {
					delete(z.Members, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Members")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Members", za0001)
					return
				}
				z.Members[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ChangeClusterMembersEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "0"
	err = en.Append(0x81, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Members)))
	if err != nil {
		err = msgp.WrapError(err, "Members")
		return
	}
	for za0001, za0002 := range z.Members {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Members")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Members", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ChangeClusterMembersEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "0"
	o = append(o, 0x81, 0xa1, 0x30)
	o = msgp.AppendMapHeader(o, uint32(len(z.Members)))
	for za0001, za0002 := range z.Members {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ChangeClusterMembersEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Members")
				return
			}
			if z.Members == nil {
				z.Members = make(map[string]string, zb0002)
			} else if len(z.Members) > 0 {
				for key := range z.Members {
					delete(z.Members, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Members")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Members", za0001)
					return
				}
				z.Members[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ChangeClusterMembersEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.MapHeaderSize
	if z.Members != nil {
		for za0001, za0002 := range z.Members {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ClusterState) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			err = z.Commit.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "1":
			err = z.Term.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "2":
			z.Round, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "3":
			z.EventType, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "4":
			z.Event, err = dc.ReadBytes(z.Event)
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ClusterState) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "0"
	err = en.Append(0x85, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = z.Commit.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Commit")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = z.Term.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteUint(z.EventType)
	if err != nil {
		err = msgp.WrapError(err, "EventType")
		return
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Event)
	if err != nil {
		err = msgp.WrapError(err, "Event")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ClusterState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "0"
	o = append(o, 0x85, 0xa1, 0x30)
	o, err = z.Commit.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Commit")
		return
	}
	// string "1"
	o = append(o, 0xa1, 0x31)
	o, err = z.Term.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendUint64(o, z.Round)
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendUint(o, z.EventType)
	// string "4"
	o = append(o, 0xa1, 0x34)
	o = msgp.AppendBytes(o, z.Event)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ClusterState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			bts, err = z.Commit.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "1":
			bts, err = z.Term.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "2":
			z.Round, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "3":
			z.EventType, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "4":
			z.Event, bts, err = msgp.ReadBytesBytes(bts, z.Event)
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ClusterState) Msgsize() (s int) {
	s = 1 + 2 + z.Commit.Msgsize() + 2 + z.Term.Msgsize() + 2 + msgp.Uint64Size + 2 + msgp.UintSize + 2 + msgp.BytesPrefixSize + len(z.Event)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CreateEnclaveEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "1":
			err = z.Key.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "3":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "4":
			z.CreatedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreateEnclaveEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "0"
	err = en.Append(0x84, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = z.Key.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreatedBy)
	if err != nil {
		err = msgp.WrapError(err, "CreatedBy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreateEnclaveEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "0"
	o = append(o, 0x84, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Name)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o, err = z.Key.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "4"
	o = append(o, 0xa1, 0x34)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreateEnclaveEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "1":
			bts, err = z.Key.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "3":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "4":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreateEnclaveEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Name) + 2 + z.Key.Msgsize() + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CreateIdentityEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Identity, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Identity")
				return
			}
		case "2":
			z.Policy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Policy")
				return
			}
		case "3":
			z.IsAdmin, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsAdmin")
				return
			}
		case "4":
			z.TTL, err = dc.ReadDuration()
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		case "5":
			z.ExpiresAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ExpiresAt")
				return
			}
		case "6":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "7":
			z.CreatedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreateIdentityEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "0"
	err = en.Append(0x88, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Identity)
	if err != nil {
		err = msgp.WrapError(err, "Identity")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteString(z.Policy)
	if err != nil {
		err = msgp.WrapError(err, "Policy")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsAdmin)
	if err != nil {
		err = msgp.WrapError(err, "IsAdmin")
		return
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = en.WriteDuration(z.TTL)
	if err != nil {
		err = msgp.WrapError(err, "TTL")
		return
	}
	// write "5"
	err = en.Append(0xa1, 0x35)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ExpiresAt)
	if err != nil {
		err = msgp.WrapError(err, "ExpiresAt")
		return
	}
	// write "6"
	err = en.Append(0xa1, 0x36)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "7"
	err = en.Append(0xa1, 0x37)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreatedBy)
	if err != nil {
		err = msgp.WrapError(err, "CreatedBy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreateIdentityEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "0"
	o = append(o, 0x88, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Identity)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendString(o, z.Policy)
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendBool(o, z.IsAdmin)
	// string "4"
	o = append(o, 0xa1, 0x34)
	o = msgp.AppendDuration(o, z.TTL)
	// string "5"
	o = append(o, 0xa1, 0x35)
	o = msgp.AppendTime(o, z.ExpiresAt)
	// string "6"
	o = append(o, 0xa1, 0x36)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "7"
	o = append(o, 0xa1, 0x37)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreateIdentityEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Identity, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Identity")
				return
			}
		case "2":
			z.Policy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Policy")
				return
			}
		case "3":
			z.IsAdmin, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsAdmin")
				return
			}
		case "4":
			z.TTL, bts, err = msgp.ReadDurationBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		case "5":
			z.ExpiresAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpiresAt")
				return
			}
		case "6":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "7":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreateIdentityEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Identity) + 2 + msgp.StringPrefixSize + len(z.Policy) + 2 + msgp.BoolSize + 2 + msgp.DurationSize + 2 + msgp.TimeSize + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CreatePolicyEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Allow")
				return
			}
			if z.Allow == nil {
				z.Allow = make(map[string]struct{}, zb0002)
			} else if len(z.Allow) > 0 {
				for key := range z.Allow {
					delete(z.Allow, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 struct{}
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Allow")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Allow", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Allow", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Allow", za0001)
							return
						}
					}
				}
				z.Allow[za0001] = za0002
			}
		case "3":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Deny")
				return
			}
			if z.Deny == nil {
				z.Deny = make(map[string]struct{}, zb0004)
			} else if len(z.Deny) > 0 {
				for key := range z.Deny {
					delete(z.Deny, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0003 string
				var za0004 struct{}
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Deny")
					return
				}
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Deny", za0003)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Deny", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Deny", za0003)
							return
						}
					}
				}
				z.Deny[za0003] = za0004
			}
		case "4":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "5":
			z.CreatedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreatePolicyEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "0"
	err = en.Append(0x86, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Allow)))
	if err != nil {
		err = msgp.WrapError(err, "Allow")
		return
	}
	for za0001 := range z.Allow {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Allow")
			return
		}
		// map header, size 0
		err = en.Append(0x80)
		if err != nil {
			return
		}
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Deny)))
	if err != nil {
		err = msgp.WrapError(err, "Deny")
		return
	}
	for za0003 := range z.Deny {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Deny")
			return
		}
		// map header, size 0
		err = en.Append(0x80)
		if err != nil {
			return
		}
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "5"
	err = en.Append(0xa1, 0x35)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreatedBy)
	if err != nil {
		err = msgp.WrapError(err, "CreatedBy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreatePolicyEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "0"
	o = append(o, 0x86, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Name)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendMapHeader(o, uint32(len(z.Allow)))
	for za0001 := range z.Allow {
		o = msgp.AppendString(o, za0001)
		// map header, size 0
		o = append(o, 0x80)
	}
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendMapHeader(o, uint32(len(z.Deny)))
	for za0003 := range z.Deny {
		o = msgp.AppendString(o, za0003)
		// map header, size 0
		o = append(o, 0x80)
	}
	// string "4"
	o = append(o, 0xa1, 0x34)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "5"
	o = append(o, 0xa1, 0x35)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreatePolicyEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Allow")
				return
			}
			if z.Allow == nil {
				z.Allow = make(map[string]struct{}, zb0002)
			} else if len(z.Allow) > 0 {
				for key := range z.Allow {
					delete(z.Allow, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 struct{}
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Allow")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Allow", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Allow", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Allow", za0001)
							return
						}
					}
				}
				z.Allow[za0001] = za0002
			}
		case "3":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Deny")
				return
			}
			if z.Deny == nil {
				z.Deny = make(map[string]struct{}, zb0004)
			} else if len(z.Deny) > 0 {
				for key := range z.Deny {
					delete(z.Deny, key)
				}
			}
			for zb0004 > 0 {
				var za0003 string
				var za0004 struct{}
				zb0004--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Deny")
					return
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Deny", za0003)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Deny", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Deny", za0003)
							return
						}
					}
				}
				z.Deny[za0003] = za0004
			}
		case "4":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "5":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreatePolicyEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Name) + 2 + msgp.MapHeaderSize
	if z.Allow != nil {
		for za0001, za0002 := range z.Allow {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + 1
		}
	}
	s += 2 + msgp.MapHeaderSize
	if z.Deny != nil {
		for za0003, za0004 := range z.Deny {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + 1
		}
	}
	s += 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CreateSecretEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			z.Secret, err = dc.ReadBytes(z.Secret)
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		case "3":
			z.SecretType, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "SecretType")
				return
			}
		case "4":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "5":
			z.CreatedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreateSecretEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "0"
	err = en.Append(0x86, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Secret)
	if err != nil {
		err = msgp.WrapError(err, "Secret")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteUint(z.SecretType)
	if err != nil {
		err = msgp.WrapError(err, "SecretType")
		return
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "5"
	err = en.Append(0xa1, 0x35)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreatedBy)
	if err != nil {
		err = msgp.WrapError(err, "CreatedBy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreateSecretEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "0"
	o = append(o, 0x86, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Name)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendBytes(o, z.Secret)
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendUint(o, z.SecretType)
	// string "4"
	o = append(o, 0xa1, 0x34)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "5"
	o = append(o, 0xa1, 0x35)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreateSecretEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			z.Secret, bts, err = msgp.ReadBytesBytes(bts, z.Secret)
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		case "3":
			z.SecretType, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecretType")
				return
			}
		case "4":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "5":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreateSecretEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Name) + 2 + msgp.BytesPrefixSize + len(z.Secret) + 2 + msgp.UintSize + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CreateSecretKeyEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			err = z.Key.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "3":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "4":
			z.CreatedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreateSecretKeyEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "0"
	err = en.Append(0x85, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = z.Key.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreatedBy)
	if err != nil {
		err = msgp.WrapError(err, "CreatedBy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreateSecretKeyEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "0"
	o = append(o, 0x85, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Name)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o, err = z.Key.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "4"
	o = append(o, 0xa1, 0x34)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreateSecretKeyEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			bts, err = z.Key.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "3":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "4":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreateSecretKeyEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Name) + 2 + z.Key.Msgsize() + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeleteEnclaveEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DeleteEnclaveEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "0"
	err = en.Append(0x81, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DeleteEnclaveEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "0"
	o = append(o, 0x81, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeleteEnclaveEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DeleteEnclaveEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeleteIdentityEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Identity, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Identity")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DeleteIdentityEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "0"
	err = en.Append(0x82, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Identity)
	if err != nil {
		err = msgp.WrapError(err, "Identity")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DeleteIdentityEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "0"
	o = append(o, 0x82, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Identity)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeleteIdentityEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Identity, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Identity")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DeleteIdentityEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Identity)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeleteKeyEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DeleteKeyEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "0"
	err = en.Append(0x82, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DeleteKeyEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "0"
	o = append(o, 0x82, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeleteKeyEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DeleteKeyEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeletePolicyEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DeletePolicyEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "0"
	err = en.Append(0x82, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DeletePolicyEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "0"
	o = append(o, 0x82, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeletePolicyEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DeletePolicyEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeleteSecretEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DeleteSecretEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "0"
	err = en.Append(0x82, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DeleteSecretEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "0"
	o = append(o, 0x82, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeleteSecretEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DeleteSecretEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeleteSecretVersionEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			z.Version, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DeleteSecretVersionEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "0"
	err = en.Append(0x83, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Enclave)
	if err != nil {
		err = msgp.WrapError(err, "Enclave")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DeleteSecretVersionEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Enclave)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendString(o, z.Name)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendUint32(o, z.Version)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeleteSecretVersionEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Enclave, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclave")
				return
			}
		case "1":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "2":
			z.Version, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DeleteSecretVersionEvent) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Enclave) + 2 + msgp.StringPrefixSize + len(z.Name) + 2 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Enclave) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			err = z.Key.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "1":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Admins")
				return
			}
			if cap(z.Admins) >= int(zb0002) {
				z.Admins = (z.Admins)[:zb0002]
			} else {
				z.Admins = make([]string, zb0002)
			}
			for za0001 := range z.Admins {
				z.Admins[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Admins", za0001)
					return
				}
			}
		case "2":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "3":
			z.CreatedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Enclave) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "0"
	err = en.Append(0x84, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = z.Key.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Admins)))
	if err != nil {
		err = msgp.WrapError(err, "Admins")
		return
	}
	for za0001 := range z.Admins {
		err = en.WriteString(z.Admins[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Admins", za0001)
			return
		}
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreatedBy)
	if err != nil {
		err = msgp.WrapError(err, "CreatedBy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Enclave) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "0"
	o = append(o, 0x84, 0xa1, 0x30)
	o, err = z.Key.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Admins)))
	for za0001 := range z.Admins {
		o = msgp.AppendString(o, z.Admins[za0001])
	}
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Enclave) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			bts, err = z.Key.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "1":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Admins")
				return
			}
			if cap(z.Admins) >= int(zb0002) {
				z.Admins = (z.Admins)[:zb0002]
			} else {
				z.Admins = make([]string, zb0002)
			}
			for za0001 := range z.Admins {
				z.Admins[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Admins", za0001)
					return
				}
			}
		case "2":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "3":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Enclave) Msgsize() (s int) {
	s = 1 + 2 + z.Key.Msgsize() + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Admins {
		s += msgp.StringPrefixSize + len(z.Admins[za0001])
	}
	s += 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EnclaveInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			err = z.Key.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "1":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "2":
			z.CreatedBy, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EnclaveInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "0"
	err = en.Append(0x83, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = z.Key.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreatedBy)
	if err != nil {
		err = msgp.WrapError(err, "CreatedBy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EnclaveInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	o, err = z.Key.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EnclaveInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			bts, err = z.Key.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "1":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "2":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EnclaveInfo) Msgsize() (s int) {
	s = 1 + 2 + z.Key.Msgsize() + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EncryptedRootKey) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Ciphertexts")
				return
			}
			if z.Ciphertexts == nil {
				z.Ciphertexts = make(map[string][]byte, zb0002)
			} else if len(z.Ciphertexts) > 0 {
				for key := range z.Ciphertexts {
					delete(z.Ciphertexts, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Ciphertexts")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Ciphertexts", za0001)
					return
				}
				z.Ciphertexts[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EncryptedRootKey) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "0"
	err = en.Append(0x81, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Ciphertexts)))
	if err != nil {
		err = msgp.WrapError(err, "Ciphertexts")
		return
	}
	for za0001, za0002 := range z.Ciphertexts {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Ciphertexts")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Ciphertexts", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EncryptedRootKey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "0"
	o = append(o, 0x81, 0xa1, 0x30)
	o = msgp.AppendMapHeader(o, uint32(len(z.Ciphertexts)))
	for za0001, za0002 := range z.Ciphertexts {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EncryptedRootKey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ciphertexts")
				return
			}
			if z.Ciphertexts == nil {
				z.Ciphertexts = make(map[string][]byte, zb0002)
			} else if len(z.Ciphertexts) > 0 {
				for key := range z.Ciphertexts {
					delete(z.Ciphertexts, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Ciphertexts")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "Ciphertexts", za0001)
					return
				}
				z.Ciphertexts[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncryptedRootKey) Msgsize() (s int) {
	s = 1 + 2 + msgp.MapHeaderSize
	if z.Ciphertexts != nil {
		for za0001, za0002 := range z.Ciphertexts {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BytesPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ForwardRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.NodeID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "1":
			z.EventType, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "2":
			z.Event, err = dc.ReadBytes(z.Event)
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ForwardRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "0"
	err = en.Append(0x83, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteUint(z.EventType)
	if err != nil {
		err = msgp.WrapError(err, "EventType")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Event)
	if err != nil {
		err = msgp.WrapError(err, "Event")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ForwardRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	o = msgp.AppendUint64(o, z.NodeID)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint(o, z.EventType)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendBytes(o, z.Event)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ForwardRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.NodeID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "1":
			z.EventType, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "2":
			z.Event, bts, err = msgp.ReadBytesBytes(bts, z.Event)
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ForwardRequest) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.UintSize + 2 + msgp.BytesPrefixSize + len(z.Event)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReplicationRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.NodeID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "1":
			err = z.Commit.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "2":
			err = z.Term.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "3":
			z.EventType, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "4":
			z.Event, err = dc.ReadBytes(z.Event)
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ReplicationRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "0"
	err = en.Append(0x85, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = z.Commit.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Commit")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = z.Term.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteUint(z.EventType)
	if err != nil {
		err = msgp.WrapError(err, "EventType")
		return
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Event)
	if err != nil {
		err = msgp.WrapError(err, "Event")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ReplicationRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "0"
	o = append(o, 0x85, 0xa1, 0x30)
	o = msgp.AppendUint64(o, z.NodeID)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o, err = z.Commit.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Commit")
		return
	}
	// string "2"
	o = append(o, 0xa1, 0x32)
	o, err = z.Term.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendUint(o, z.EventType)
	// string "4"
	o = append(o, 0xa1, 0x34)
	o = msgp.AppendBytes(o, z.Event)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReplicationRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.NodeID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "1":
			bts, err = z.Commit.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "2":
			bts, err = z.Term.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "3":
			z.EventType, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "4":
			z.Event, bts, err = msgp.ReadBytesBytes(bts, z.Event)
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ReplicationRequest) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + z.Commit.Msgsize() + 2 + z.Term.Msgsize() + 2 + msgp.UintSize + 2 + msgp.BytesPrefixSize + len(z.Event)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VoteRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.NodeID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "1":
			err = z.Commit.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "2":
			err = z.Term.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "3":
			z.ElectionRound, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ElectionRound")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *VoteRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "0"
	err = en.Append(0x84, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = z.Commit.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Commit")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = z.Term.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ElectionRound)
	if err != nil {
		err = msgp.WrapError(err, "ElectionRound")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *VoteRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "0"
	o = append(o, 0x84, 0xa1, 0x30)
	o = msgp.AppendUint64(o, z.NodeID)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o, err = z.Commit.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Commit")
		return
	}
	// string "2"
	o = append(o, 0xa1, 0x32)
	o, err = z.Term.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendUint64(o, z.ElectionRound)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VoteRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.NodeID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "1":
			bts, err = z.Commit.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "2":
			bts, err = z.Term.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "3":
			z.ElectionRound, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ElectionRound")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VoteRequest) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + z.Commit.Msgsize() + 2 + z.Term.Msgsize() + 2 + msgp.Uint64Size
	return
}
